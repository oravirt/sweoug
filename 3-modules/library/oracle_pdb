#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: oracle_pdb
short_description: Manage pluggable databases in Oracle
description:
    - Manage pluggable databases in Oracle.
version_added: "2.1.0.0"
options:
    name:
        description:
            - The name of the pdb
        required: True
        default: None
    sourcedb:
        description:
            - The container database which will house the pdb
        required: True
        default: None
        aliases: ['db']
    state:
        description:
            - The intended state of the pdb. 'status' will just show the status of the pdb
        default: present
        choices: ['present','absent', 'status']
    pdb_admin_username:
        description:
            - The username for the pdb admin user
        required: false
        default: pdb_admin
        aliases: ['un']
    pdb_admin_password:
        description:
            - The password for the pdb admin user
        required: false
        default: pdb_admin
        aliases: ['pw']
    datafile_dest:
        description:
            - The path where the datafiles will be placed
        required: false
        default: None
        aliases: ['dfd']
    username:
        description:
            - The database username to connect to the database
        required: false
        default: None
        aliases: ['un']
    password:
        description:
            - The password to connect to the database
        required: false
        default: None
        aliases: ['pw']
    service_name:
        description:
            - The service_name to connect to the database
        required: false
        default: database_name
        aliases: ['sn']
    hostname:
        description:
            - The host of the database
        required: false
        default: localhost
        aliases: ['host']
    port:
        description:
            - The listener port to connect to the database
        required: false
        default: 1521

notes:
    - cx_Oracle needs to be installed
requirements: [ "cx_Oracle" ]
author: Mikael SandstrÃ¶m, oravirt@gmail.com, @oravirt
'''

EXAMPLES = '''
# Creates a pdb on a different filesystem
oracle_pdb: name=pdb1 sourcedb=cdb1 dfd=/u02/oradata/pdb1 state=present un=system pw=Oracle123

# Remove a pdb
oracle_pdb: name=pdb1 sourcedb=cdb1 state=absent un=system pw=Oracle123

# Check the status for a pdb
oracle_pdb: name=pdb1 sourcedb=cdb1 state=status un=system pw=Oracle123

'''
import os

try:
    import cx_Oracle
except ImportError:
    cx_oracle_exists = False
else:
    cx_oracle_exists = True


# Check if the pdb exists
def check_pdb_exists(cursor, module, msg, name):
    global newpdb
    sql = 'select lower(pdb_name) from dba_pdbs where lower (pdb_name) = \'%s\'' % (name.lower())

    result = execute_sql_get(module, msg, cursor, sql)
    if len(result) > 0:
        newpdb = False
        return True
    else:
        newpdb = True
        return False


def create_pdb(cursor, module, msg, oracle_home, name, sourcedb, pdb_admin_username, pdb_admin_password, datafile_dest, save_state):

    command = '%s/bin/dbca -silent -createPluggableDatabase -pdbName %s -sourceDB %s' % (oracle_home, name, sourcedb)
    command += ' -pdbAdminUserName %s -pdbAdminPassword %s ' % (pdb_admin_username, pdb_admin_password)

    if datafile_dest != None:
        command += ' -pdbDatafileDestination %s' % (datafile_dest)

    (rc, stdout, stderr) = module.run_command(command)
    if rc != 0:
        msg[0] = 'Error, stdout: %s, stderr: %s, command is %s' % (stdout, stderr, command)
        return False
    else:
        if save_state:
            sql = 'alter pluggable database %s save state' % (name)
            execute_sql(module, msg, cursor, sql)

        return True #<-- all is well

def remove_pdb(cursor, module, msg, oracle_home, name, sourcedb):

    command = '%s/bin/dbca -silent -deletePluggableDatabase -pdbName %s -sourceDB %s' % (oracle_home, name, sourcedb)

    (rc, stdout, stderr) = module.run_command(command)
    if rc != 0:
        msg[0] = 'Error, stdout: %s, stderr: %s, command is %s' % (stdout, stderr, command)
        return False
    else:
        return True

def check_pdb_status(cursor, module, msg, name):

    sql = 'select name, con_id, con_uid, open_mode,restricted,to_char(open_time,\'HH24:MI:SS YYYY-MM-DD\'),recovery_status from v$pdbs where lower(name) = \'%s\'' % (name)
    result = execute_sql_get(module, msg, cursor, sql)
    if len(result) > 0:
        for a in result:
            msg[0] = 'pdb name: %s, con_id: %s, con_uid: %s, open_mode: %s, restricted: %s,  open_time: %s' % (a[0].lower(), a[1], a[2], a[3], a[4], a[5])

def ensure_pdb_state(cursor, module, msg, name, state, newpdb):

    current_state = []
    wanted_state = []
    sql = 'select lower(open_mode), lower(restricted) from v$pdbs where lower(name) = \'%s\'' % (name.lower())

    state_now = execute_sql_get(module, msg, cursor, sql)

    ensure_sql = 'alter pluggable database %s ' % (name)

    if state in ('present','open','read_write'):
        wanted_state = [('read write','no')]
        ensure_sql += ' open force'
    elif state == 'closed':
        wanted_state = [('mounted', None)]
        ensure_sql += ' close immediate'
    elif state == 'read_only':
        wanted_state = [('read only','no')]
        ensure_sql += 'open read only force'
    elif state == 'restricted':
        wanted_state = [('read write','yes')]
        ensure_sql += 'open restricted force'


    if wanted_state == state_now:
        if newpdb:
            msg[0] = 'Successfully created pluggable database %s ' % (name)
            module.exit_json(msg=msg[0], changed=True)
        msg[0] = 'Pluggable database %s already in the intended state' % (name)
        module.exit_json(msg=msg[0], changed=False)

    if execute_sql(module, msg, cursor, ensure_sql):
        msg[0] = 'Pluggable database %s has been put in the intended state: %s' % (name, state)
        module.exit_json(msg=msg[0], changed=True)
    else:
        return False






def execute_sql_get(module, msg, cursor, sql):

    try:
        cursor.execute(sql)
        result = (cursor.fetchall())
    except cx_Oracle.DatabaseError, exc:
        error, = exc.args
        msg[0] = 'Something went wrong while executing sql_get - %s sql: %s' % (error.message, sql)
        module.fail_json(msg=msg[0], changed=False)
        return False
    return result

def execute_sql(module, msg, cursor, sql):

    try:
        cursor.execute(sql)
    except cx_Oracle.DatabaseError, exc:
        error, = exc.args
        msg[0] = 'Something went wrong while executing sql - %s sql: %s' % (error.message, sql)
        module.fail_json(msg=msg[0], changed=False)
        return False
    return True



def main():

    msg = ['']

    module = AnsibleModule(
        argument_spec = dict(
            name                = dict(required=True, aliases = ['pdb','pdb_name']),
            oracle_home         = dict(default=None, aliases = ['oh']),
            sourcedb            = dict(required=True, aliases = ['db','container']),
            state               = dict(default="present", choices = ["present", "absent", "open", "closed", "read_write", "read_only", "restricted", "status"]),
            save_state          = dict(default=True, type = 'bool'),
            pdb_admin_username  = dict(required=False, default = 'pdb_admin', aliases = ['pdbadmun']),
            pdb_admin_password  = dict(required=False, default = 'pdb_admin', aliases = ['pdbadmpw']),
            datafile_dest       = dict(required=False, aliases = ['dfd']),
            user                = dict(required=False, aliases = ['un','username']),
            password            = dict(required=False, no_log=True, aliases = ['pw']),
            mode                = dict(default="normal", choices = ["sysdba", "normal"]),
            service_name        = dict(required=False, aliases = ['sn']),
            hostname            = dict(required=False, default = 'localhost', aliases = ['host']),
            port                = dict(required=False, default = 1521),




        ),

    )

    name                = module.params["name"]
    oracle_home         = module.params["oracle_home"]
    sourcedb            = module.params["sourcedb"]
    state               = module.params["state"]
    save_state          = module.params["save_state"]
    pdb_admin_username  = module.params["pdb_admin_username"]
    pdb_admin_password  = module.params["pdb_admin_password"]
    datafile_dest       = module.params["datafile_dest"]
    user                = module.params["user"]
    password            = module.params["password"]
    mode                = module.params["mode"]
    service_name        = module.params["service_name"]
    hostname            = module.params["hostname"]
    port                = module.params["port"]


    if oracle_home is not None:
        os.environ['ORACLE_HOME'] = oracle_home
    elif 'ORACLE_HOME' in os.environ:
        oracle_home = os.environ['ORACLE_HOME']
    else:
        msg[0] = 'ORACLE_HOME variable not set. Please set it and re-run the command'
        module.fail_json(msg=msg[0], changed=False)


    if not cx_oracle_exists:
        msg[0] = "The cx_Oracle module is required. 'pip install cx_Oracle' should do the trick. If cx_Oracle is installed, make sure ORACLE_HOME & LD_LIBRARY_PATH is set"
        module.fail_json(msg=msg[0])

    if service_name == None:
        service_name = sourcedb

    wallet_connect = '/@%s' % service_name
    try:
        if (not user and not password ): # If neither user or password is supplied, the use of an oracle wallet is assumed
            if mode == 'sysdba':
                connect = wallet_connect
                conn = cx_Oracle.connect(wallet_connect, mode=cx_Oracle.SYSDBA)
            else:
                connect = wallet_connect
                conn = cx_Oracle.connect(wallet_connect)

        elif (user and password ):
            if mode == 'sysdba':
                dsn = cx_Oracle.makedsn(host=hostname, port=port, service_name=service_name)
                connect = dsn
                conn = cx_Oracle.connect(user, password, dsn, mode=cx_Oracle.SYSDBA)
            else:
                dsn = cx_Oracle.makedsn(host=hostname, port=port, service_name=service_name)
                connect = dsn
                conn = cx_Oracle.connect(user, password, dsn)

        elif (not(user) or not(password)):
            module.fail_json(msg='Missing username or password for cx_Oracle')

    except cx_Oracle.DatabaseError, exc:
            error, = exc.args
            msg[0] = 'Could not connect to database - %s, connect descriptor: %s' % (error.message, connect)
            module.fail_json(msg=msg[0], changed=False)

    cursor = conn.cursor()



    if state in ('present','closed', 'open', 'restricted','read_only','read_write'):
        if not check_pdb_exists(cursor, module, msg, name):
            if create_pdb(cursor, module, msg, oracle_home, name, sourcedb, pdb_admin_username, pdb_admin_password, datafile_dest, save_state):
                ensure_pdb_state(cursor, module, msg, name, state, newpdb)
                module.exit_json(msg=msg[0], changed=True)
            else:
                module.fail_json(msg=msg[0], changed=False)
        else:
            ensure_pdb_state(cursor, module, msg, name, state, newpdb)

    elif state == 'absent' :
        if check_pdb_exists(cursor, module, msg, name):
            if remove_pdb(cursor, module, msg, oracle_home, name, sourcedb):
                msg[0] = 'Pluggable database %s successfully removed' % (name)
                module.exit_json(msg=msg[0], changed=True)
            else:
                module.fail_json(msg=msg[0], changed=False)
        else:
            msg[0] = 'Pluggable database %s doesn\'t exist' % (name)
            module.exit_json(msg=msg[0], changed=False)

    elif state == 'status':
        if check_pdb_exists(cursor, module, msg, name):
            check_pdb_status(cursor, module, msg, name)
            module.exit_json(msg=msg[0], changed=False)
        else:
            msg[0] = 'Pluggable database %s doesn\'t exist' % (name)
            module.exit_json(msg=msg[0], changed=False)


    module.exit_json(msg="Unhandled exit", changed=False)





from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
