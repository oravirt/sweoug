#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: oracle_sql
short_description: Manage pluggable databases in Oracle
description:
    - Manage pluggable databases in Oracle.
version_added: "2.1.0.0"
options:
    username:
        description:
            - The database username to connect to the database
        required: false
        default: None
        aliases: ['un']
    password:
        description:
            - The password to connect to the database
        required: false
        default: None
        aliases: ['pw']
    service_name:
        description:
            - The service_name to connect to the database
        required: false
        default: database_name
        aliases: ['sn']
    hostname:
        description:
            - The host of the database
        required: false
        default: localhost
        aliases: ['host']
    port:
        description:
            - The listener port to connect to the database
        required: false
        default: 1521
    sql:
        description:
            - The sql you want to execute
        required: false
    script:
        description:
            - The script you want to execute. Doesn't handle selects
        required: false
        default: 1521
notes:
    - cx_Oracle needs to be installed
requirements: [ "cx_Oracle" ]
author: Mikael SandstrÃ¶m, oravirt@gmail.com, @oravirt
'''

EXAMPLES = '''
# Execute arbitrary sql
oracle_sql: name=myservice =system pw=Oracle123 sql='select username from dba_users'

# Execute arbitrary script1
oracle_sql: name=myservice =system pw=Oracle123 script=/u01/scripts/create-all-the-procedures.sql

# Execute arbitrary script2
oracle_sql: name=myservice =system pw=Oracle123 script=/u01/scripts/create-tables-and-insert-default-values.sql

'''
import os


try:
    import cx_Oracle
except ImportError:
    cx_oracle_exists = False
else:
    cx_oracle_exists = True


def execute_sql_get(module, msg, cursor, sql):

    try:
        cursor.execute(sql)
        result = (cursor.fetchall())
    except cx_Oracle.DatabaseError, exc:
        error, = exc.args
        msg[0] = 'Something went wrong while executing sql_get - %s sql: %s' % (error.message, sql)
        module.fail_json(msg=msg[0], changed=False)
        return False
    return result

def execute_sql(module, msg, cursor, conn, sql):


    if 'insert' or 'delete' or 'update' in lower.sql():
        docommit = True
    else:
        docommit = False

    try:
        cursor.execute(sql)
    except cx_Oracle.DatabaseError, exc:
        error, = exc.args
        msg[0] = 'Something went wrong while executing sql - %s sql: %s' % (error.message, sql)
        module.fail_json(msg=msg[0], changed=False)
        return False
    if docommit:
        conn.commit()
    return True

def read_file(msg,module,script):

    try:
        f = open(script, 'r')
        sqlfile = f.read()
        f.close()
    except IOError as e:
        msg[0] = 'Couldn\'t open/read file: %s' % (e)
        module.fail_json(msg=msg[0], changed=False)

    return sqlfile

def clean_sqlfile(sqlfile):
    sqlfile = sqlfile.strip()
    sqlfile = sqlfile.lstrip()
    sqlfile = sqlfile.lstrip()
    sqlfile = os.linesep.join([s for s in sqlfile.splitlines() if s])
    return sqlfile


def main():

    msg = ['']

    module = AnsibleModule(
        argument_spec = dict(
            user                = dict(required=False, aliases = ['un','username']),
            password            = dict(required=False, no_log=True, aliases = ['pw']),
            mode                = dict(default="normal", choices = ["sysdba", "normal"]),
            service_name        = dict(required=False, aliases = ['sn']),
            hostname            = dict(required=False, default = 'localhost', aliases = ['host']),
            port                = dict(required=False, default = 1521),
            sql                 = dict(required=False),
            script              = dict(required=False),

        ),
        mutually_exclusive=[['sql', 'script']]
    )

    user                = module.params["user"]
    password            = module.params["password"]
    mode                = module.params["mode"]
    service_name        = module.params["service_name"]
    hostname            = module.params["hostname"]
    port                = module.params["port"]
    sql                 = module.params["sql"]
    script              = module.params["script"]


    if not cx_oracle_exists:
        msg[0] = "The cx_Oracle module is required. 'pip install cx_Oracle' should do the trick. If cx_Oracle is installed, make sure ORACLE_HOME & LD_LIBRARY_PATH is set"
        module.fail_json(msg=msg[0])

    wallet_connect = '/@%s' % service_name
    try:
        if (not user and not password ): # If neither user or password is supplied, the use of an oracle wallet is assumed
            if mode == 'sysdba':
                connect = wallet_connect
                conn = cx_Oracle.connect(wallet_connect, mode=cx_Oracle.SYSDBA)
            else:
                connect = wallet_connect
                conn = cx_Oracle.connect(wallet_connect)

        elif (user and password ):
            if mode == 'sysdba':
                dsn = cx_Oracle.makedsn(host=hostname, port=port, service_name=service_name)
                connect = dsn
                conn = cx_Oracle.connect(user, password, dsn, mode=cx_Oracle.SYSDBA)
            else:
                dsn = cx_Oracle.makedsn(host=hostname, port=port, service_name=service_name)
                connect = dsn
                conn = cx_Oracle.connect(user, password, dsn)

        elif (not(user) or not(password)):
            module.fail_json(msg='Missing username or password for cx_Oracle')

    except cx_Oracle.DatabaseError, exc:
        error, = exc.args
        msg[0] = 'Could not connect to database - %s, connect descriptor: %s' % (error.message, connect)
        module.fail_json(msg=msg[0], changed=False)

    cursor = conn.cursor()

    if sql:
        sql = sql.rstrip(';')
        if sql.lower().startswith('select '):
            result = execute_sql_get(module, msg, cursor, sql)
            module.exit_json(msg=result, changed=False)
        else:
            execute_sql(module, msg, cursor,conn, sql)
            msg[0] = 'SQL executed: %s' % (sql)
            module.exit_json(msg=msg[0], changed=True)
    else:
        sqlfile = read_file(msg,module,script)
        sqlfile = clean_sqlfile(sqlfile)
        sqldelim = ';'
        if 'create or replace' in sqlfile.lower():
            sqldelim = '/'

        sql = sqlfile.split(sqldelim)
        for q in sql:
            if len(q) > 0:
                execute_sql(module, msg, cursor,conn, q)
            else:
                msg[0] = 'Finished running script %s' % (script)
                module.exit_json(msg=msg[0], changed=True)


    module.exit_json(msg="Unhandled exit", changed=False)





from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
